#listix#

   <thisScript path> //javaj/widgets/widgetLabor/inc/classEBSGenerator.gasti
   <thisScript date> //05.05.2007 14:46

   <className> //@<ePackageLastName>EBS

   <nameUpper>  STRCONV, UPPER, @<name>
   <nameUpper1> STRCONV, UPPER1, @<name>

   <classBody>
      ////AUTOMATIC GENERATED AND WRITABLE SOURCE!
      ////  Generated by the listix script "@<thisScript path>" (@<thisScript date>)
      ////  on @<:listix date>
      //
      ///*
      //package javaj.widgets
      //Copyright (C) @<:listix date yyyy> @<eAuthor>
      //
      //This program is free software; you can redistribute it and/or modify it under
      //the terms of the GNU General Public License as published by the Free Software
      //Foundation; either version 2 of the License, or (at your option) any later
      //version.
      //
      //This program is distributed in the hope that it will be useful, but WITHOUT ANY
      //WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
      //PARTICULAR PURPOSE. See the GNU General Public License for more details.
      //
      //You should have received a copy of the GNU General Public License along with
      //this program; if not, write to the Free Software Foundation, Inc., 59 Temple
      //Place - Suite 330, Boston, MA 02111-1307, USA.
      //*/
      //
      //package javaj.widgets.@<ePackageLastName>;
      //
      //import de.elxala.langutil.*;      // for attributes of type "int"
      //import de.elxala.Eva.*;
      //import javaj.widgets.basics.*;
      //
      //@<xExtraImport>
      //
      ///**
      //@<xJavaDoc4Class>
      //
      //  Attributes:
      //
      //@<javadocAttributes>
      //
      //  Messages:
      //
      //@<javadocMessages>
      //
      //*/
      //public class @<className> extends widgetEBS
      //{
      //   // Attributes
      //   //
      //@<declareAttributes>
      //
      //   // Messages
      //   //
      //@<declareMessages>
      //
      //   // Other variables
      //   //
      //
      //   /// Constructor
      //   //
      //   public @<ePackageLastName>EBS (String nameWidget, EvaUnit pData, EvaUnit pControl)
      //   {
      //      super (nameWidget, pData, pControl);
      //   }
      //
      //@<attributes setters & getters>
      //
      //    // Extra functionality apart from Attributes and Messages
      //
      //@<xExtraBody>
      //}
      //

   <javadocAttributes>
      SET TABLE, EVA, tableAttributes
      //      "@<name>"    @<doc>

   <javadocMessages>
      SET TABLE, EVA, tableMessages
      //      "@<name>"    @<doc>

   <declareAttributes>
      SET TABLE, EVA, tableAttributes
      //   public static final String sATTR_@<nameUpper> = "@<name>";

   <declareMessages>
      SET TABLE, EVA, tableMessages
      //   public static final String sMSG_@<nameUpper> = "@<name>";

   <attributes setters & getters>
      SET TABLE, EVA, tableAttributes
      //@<genSetterAndGetter>
      //

   <genSetterAndGetter>
      IN CASE, @<type>
             , bool  , S&G bool
             , int   , S&G int
             , string, S&G string
             , eva   , S&G eva
             , ELSE  , S&G eva


   <S&G bool>
      //   /// getter for attribute @<name>: @<doc>
      //   public boolean getIs@<nameUpper1> ()
      //   {
      //      return "1".equals (getSimpleAttribute (@<line>, sATTR_@<nameUpper>, "@<defaultValue>"));
      //   }
      //
      //   /// setter for attribute @<name>: @<doc>
      //   public void setIs@<nameUpper1> (boolean value)
      //   {
      //      setSimpleAttribute (@<line>, sATTR_@<nameUpper>, (value ? "1": "0"));
      //   }

   <S&G int>
      //   /// getter for attribute @<name>: @<doc>
      //   public int get@<nameUpper1> ()
      //   {
      //      return stdlib.atoi (getSimpleAttribute (@<line>, sATTR_@<nameUpper>, "@<defaultValue>"));
      //   }
      //
      //   /// setter for attribute @<name>: @<doc>
      //   public void set@<nameUpper1> (int value)
      //   {
      //      setSimpleAttribute (@<line>, sATTR_@<nameUpper>, "" + value);
      //   }

   <S&G string>
      //   /// getter for attribute @<name>: @<doc>
      //   public String get@<nameUpper1> ()
      //   {
      //      return getSimpleAttribute (@<line>, sATTR_@<nameUpper>, "@<defaultValue>");
      //   }
      //
      //   /// setter for attribute @<name>: @<doc>
      //   public void set@<nameUpper1> (String value)
      //   {
      //      setSimpleAttribute (@<line>, sATTR_@<nameUpper>, value);
      //   }

   <S&G eva>
      //   /** getter for attribute @<name>: @<doc>
      //       returns the Eva associated with this attribute or null if it does not exists.
      //       if 'forceCreation' is true no null will be returned but a new Eva will be created and returned.
      //       Note that this attribute has no setter. This is to avoid in many cases an ineffective
      //       copy from an eva to another. To perform an equivalent set@<nameUpper1> just get the eva
      //       using forceCreation = true (get@<nameUpper1> (true)) and then set the value directly on it.
      //   */
      //   public Eva get@<nameUpper1> (boolean forceCreation)
      //   {
      //      return getAttribute (CONTROL, forceCreation, "@<name>");
      //   }
      //
      //   /** getter for attribute @<name>: @<doc>
      //       returns the Eva associated with this attribute or null if it does not exists.
      //   */
      //   public Eva get@<nameUpper1> ()
      //   {
      //      return get@<nameUpper1> (false);
      //   }
      //
