//AUTOMATIC GENERATED AND WRITABLE SOURCE!
//  Generated by the listix script "javaj/widgets/widgetLabor/inc/generateOneEBS.gasti" (09.12.2007 18:02)
//  on 15.02.2009 22:15

/*
package javaj.widgets
Copyright (C) 2009 Alejandro Xalabarder

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA.
*/

package javaj.widgets;

import de.elxala.langutil.*;      // for attributes of type "int"
import de.elxala.Eva.*;
import javaj.widgets.basics.*;

/**
  EvaBasedStructure (EBS) for zWidgets of type tree

  Attributes:

      "visible"    Value 0 to make the widget not visible
      "enabled"    Value 0 to disable the widget
      "separator"    Character to be used as node separator (or path separator)
      "dataColumn"   Column name of the data that contains the tree path info (if not given column 0 will be take)
      "shortPath"    if 1 (true) the nodes with just one child are grouped using the nodeSeparator thus reducing nodes
      "rootTitle"    String to be used as label of the root node in the tree but not to build the fullpath
      "expandedNodes"    list of nodes that are expanded
      "selectedNodes"    table of one column "node" where the selected nodes are set
      "folderIcons"    list of icon names for the folders (general, root0, root1, root2). Note that here applies the same rules as for leaf nodes using baseIcons and endIcons
      "dbName"    If specified then it is the database name from which the data will be retrieved (see defaultDbName)
      "sqlSelect"    If specified then the data will be retrieved from a database (see dbName)
      "sqlExtraFilter"    Filter that is added to the query
      "droppedFiles"    Table with all dropped files
      "baseIcons"    Base part of the path where the Icon for this record is to be found, the rest is found in the field "icon" and the attribute "extensionIcons". Note that this attribute will be applied to all records
      "endIcons"    End of of the path where the Icon for this node is to be found. Note that this attribute will be applied to all nodes
      "disableIcons"    Disable custom Icons for this tree (it might be more performant for big trees)

  Messages:



*/
public class generatedEBS4Tree extends widgetEBS
{
   // Attributes
   //
   public static final String sATTR_VISIBLE = "visible";
   public static final String sATTR_ENABLED = "enabled";
   public static final String sATTR_SEPARATOR = "separator";
   public static final String sATTR_DATACOLUMN = "dataColumn";
   public static final String sATTR_SHORTPATH = "shortPath";
   public static final String sATTR_ROOTTITLE = "rootTitle";
   public static final String sATTR_EXPANDEDNODES = "expandedNodes";
   public static final String sATTR_SELECTEDNODES = "selectedNodes";
   public static final String sATTR_FOLDERICONS = "folderIcons";
   public static final String sATTR_DBNAME = "dbName";
   public static final String sATTR_SQLSELECT = "sqlSelect";
   public static final String sATTR_SQLEXTRAFILTER = "sqlExtraFilter";
   public static final String sATTR_DROPPEDFILES = "droppedFiles";
   public static final String sATTR_BASEICONS = "baseIcons";
   public static final String sATTR_ENDICONS = "endIcons";
   public static final String sATTR_DISABLEICONS = "disableIcons";

   // Messages
   //


   // Other variables
   //

   /// Constructor
   //
   public generatedEBS4Tree (String nameWidget, EvaUnit pData, EvaUnit pControl)
   {
      super (nameWidget, pData, pControl);
   }

   /// getter for attribute visible: Value 0 to make the widget not visible
   public boolean getIsVisible ()
   {
      return "1".equals (getSimpleAttribute (CONTROL, sATTR_VISIBLE, "1"));
   }

   /// setter for attribute visible: Value 0 to make the widget not visible
   public void setIsVisible (boolean value)
   {
      setSimpleAttribute (CONTROL, sATTR_VISIBLE, (value ? "1": "0"));
   }

   /// getter for attribute enabled: Value 0 to disable the widget
   public boolean getIsEnabled ()
   {
      return "1".equals (getSimpleAttribute (CONTROL, sATTR_ENABLED, "1"));
   }

   /// setter for attribute enabled: Value 0 to disable the widget
   public void setIsEnabled (boolean value)
   {
      setSimpleAttribute (CONTROL, sATTR_ENABLED, (value ? "1": "0"));
   }

   /// getter for attribute separator: Character to be used as node separator (or path separator)
   public String getSeparator ()
   {
      return getSimpleAttribute (CONTROL, sATTR_SEPARATOR, "/");
   }

   /// setter for attribute separator: Character to be used as node separator (or path separator)
   public void setSeparator (String value)
   {
      setSimpleAttribute (CONTROL, sATTR_SEPARATOR, value);
   }

   /// getter for attribute dataColumn: Column name of the data that contains the tree path info (if not given column 0 will be take)
   public String getDataColumn ()
   {
      return getSimpleAttribute (DATA, sATTR_DATACOLUMN, "");
   }

   /// setter for attribute dataColumn: Column name of the data that contains the tree path info (if not given column 0 will be take)
   public void setDataColumn (String value)
   {
      setSimpleAttribute (DATA, sATTR_DATACOLUMN, value);
   }

   /// getter for attribute shortPath: if 1 (true) the nodes with just one child are grouped using the nodeSeparator thus reducing nodes
   public boolean getIsShortPath ()
   {
      return "1".equals (getSimpleAttribute (CONTROL, sATTR_SHORTPATH, "1"));
   }

   /// setter for attribute shortPath: if 1 (true) the nodes with just one child are grouped using the nodeSeparator thus reducing nodes
   public void setIsShortPath (boolean value)
   {
      setSimpleAttribute (CONTROL, sATTR_SHORTPATH, (value ? "1": "0"));
   }

   /// getter for attribute rootTitle: String to be used as label of the root node in the tree but not to build the fullpath
   public String getRootTitle ()
   {
      return getSimpleAttribute (CONTROL, sATTR_ROOTTITLE, "");
   }

   /// setter for attribute rootTitle: String to be used as label of the root node in the tree but not to build the fullpath
   public void setRootTitle (String value)
   {
      setSimpleAttribute (CONTROL, sATTR_ROOTTITLE, value);
   }

   /** getter for attribute expandedNodes: list of nodes that are expanded
       returns the Eva associated with this attribute or null if it does not exists.
       if 'forceCreation' is true no null will be returned but a new Eva will be created and returned.
       Note that this attribute has no setter. This is to avoid in many cases an ineffective
       copy from an eva to another. To perform an equivalent setExpandedNodes just get the eva
       using forceCreation = true (getExpandedNodes (true)) and then set the value directly on it.
   */
   public Eva getExpandedNodes (boolean forceCreation)
   {
      return getAttribute (CONTROL, forceCreation, "expandedNodes");
   }

   /** getter for attribute expandedNodes: list of nodes that are expanded
       returns the Eva associated with this attribute or null if it does not exists.
   */
   public Eva getExpandedNodes ()
   {
      return getExpandedNodes (false);
   }


   /** getter for attribute selectedNodes: table of one column "node" where the selected nodes are set
       returns the Eva associated with this attribute or null if it does not exists.
       if 'forceCreation' is true no null will be returned but a new Eva will be created and returned.
       Note that this attribute has no setter. This is to avoid in many cases an ineffective
       copy from an eva to another. To perform an equivalent setSelectedNodes just get the eva
       using forceCreation = true (getSelectedNodes (true)) and then set the value directly on it.
   */
   public Eva getSelectedNodes (boolean forceCreation)
   {
      return getAttribute (CONTROL, forceCreation, "selectedNodes");
   }

   /** getter for attribute selectedNodes: table of one column "node" where the selected nodes are set
       returns the Eva associated with this attribute or null if it does not exists.
   */
   public Eva getSelectedNodes ()
   {
      return getSelectedNodes (false);
   }


   /** getter for attribute folderIcons: list of icon names for the folders (general, root0, root1, root2). Note that here applies the same rules as for leaf nodes using baseIcons and endIcons
       returns the Eva associated with this attribute or null if it does not exists.
       if 'forceCreation' is true no null will be returned but a new Eva will be created and returned.
       Note that this attribute has no setter. This is to avoid in many cases an ineffective
       copy from an eva to another. To perform an equivalent setFolderIcons just get the eva
       using forceCreation = true (getFolderIcons (true)) and then set the value directly on it.
   */
   public Eva getFolderIcons (boolean forceCreation)
   {
      return getAttribute (CONTROL, forceCreation, "folderIcons");
   }

   /** getter for attribute folderIcons: list of icon names for the folders (general, root0, root1, root2). Note that here applies the same rules as for leaf nodes using baseIcons and endIcons
       returns the Eva associated with this attribute or null if it does not exists.
   */
   public Eva getFolderIcons ()
   {
      return getFolderIcons (false);
   }


   /// getter for attribute dbName: If specified then it is the database name from which the data will be retrieved (see defaultDbName)
   public String getDbName ()
   {
      return getSimpleAttribute (DATA, sATTR_DBNAME, "");
   }

   /// setter for attribute dbName: If specified then it is the database name from which the data will be retrieved (see defaultDbName)
   public void setDbName (String value)
   {
      setSimpleAttribute (DATA, sATTR_DBNAME, value);
   }

   /// getter for attribute sqlSelect: If specified then the data will be retrieved from a database (see dbName)
   public String getSqlSelect ()
   {
      return getSimpleAttribute (DATA, sATTR_SQLSELECT, "");
   }

   /// setter for attribute sqlSelect: If specified then the data will be retrieved from a database (see dbName)
   public void setSqlSelect (String value)
   {
      setSimpleAttribute (DATA, sATTR_SQLSELECT, value);
   }

   /// getter for attribute sqlExtraFilter: Filter that is added to the query
   public String getSqlExtraFilter ()
   {
      return getSimpleAttribute (DATA, sATTR_SQLEXTRAFILTER, "");
   }

   /// setter for attribute sqlExtraFilter: Filter that is added to the query
   public void setSqlExtraFilter (String value)
   {
      setSimpleAttribute (DATA, sATTR_SQLEXTRAFILTER, value);
   }

   /** getter for attribute droppedFiles: Table with all dropped files
       returns the Eva associated with this attribute or null if it does not exists.
       if 'forceCreation' is true no null will be returned but a new Eva will be created and returned.
       Note that this attribute has no setter. This is to avoid in many cases an ineffective
       copy from an eva to another. To perform an equivalent setDroppedFiles just get the eva
       using forceCreation = true (getDroppedFiles (true)) and then set the value directly on it.
   */
   public Eva getDroppedFiles (boolean forceCreation)
   {
      return getAttribute (CONTROL, forceCreation, "droppedFiles");
   }

   /** getter for attribute droppedFiles: Table with all dropped files
       returns the Eva associated with this attribute or null if it does not exists.
   */
   public Eva getDroppedFiles ()
   {
      return getDroppedFiles (false);
   }


   /// getter for attribute baseIcons: Base part of the path where the Icon for this record is to be found, the rest is found in the field "icon" and the attribute "extensionIcons". Note that this attribute will be applied to all records
   public String getBaseIcons ()
   {
      return getSimpleAttribute (DATA, sATTR_BASEICONS, "");
   }

   /// setter for attribute baseIcons: Base part of the path where the Icon for this record is to be found, the rest is found in the field "icon" and the attribute "extensionIcons". Note that this attribute will be applied to all records
   public void setBaseIcons (String value)
   {
      setSimpleAttribute (DATA, sATTR_BASEICONS, value);
   }

   /// getter for attribute endIcons: End of of the path where the Icon for this node is to be found. Note that this attribute will be applied to all nodes
   public String getEndIcons ()
   {
      return getSimpleAttribute (DATA, sATTR_ENDICONS, ".png");
   }

   /// setter for attribute endIcons: End of of the path where the Icon for this node is to be found. Note that this attribute will be applied to all nodes
   public void setEndIcons (String value)
   {
      setSimpleAttribute (DATA, sATTR_ENDICONS, value);
   }

   /// getter for attribute disableIcons: Disable custom Icons for this tree (it might be more performant for big trees)
   public boolean getIsDisableIcons ()
   {
      return "1".equals (getSimpleAttribute (DATA, sATTR_DISABLEICONS, "0"));
   }

   /// setter for attribute disableIcons: Disable custom Icons for this tree (it might be more performant for big trees)
   public void setIsDisableIcons (boolean value)
   {
      setSimpleAttribute (DATA, sATTR_DISABLEICONS, (value ? "1": "0"));
   }

}
