#documentation#


#listix#

   <XMELON_PREFIX> xmelon
   <BREAK_LINE> ""
   <DBNAME> ""

   <use tmp_calc_PathTag> 0

   <SQL calc_PathTag SELECT>
      //SELECT patID, tagID,count(*) AS ncount FROM @<XMELON_PREFIX>_data GROUP BY patID,tagID ORDER BY ncount DESC

   <SQL calc_PathTag>
      IN CASE, @<use tmp_calc_PathTag>
             , 0, @<SQL calc_PathTag SELECT>
             , 1, //SELECT * FROM tmp_calc_PathTag

   <SQL calc_mainTables>  //SELECT patID, COUNT(tagID) AS maxCampos, MAX(ncount) AS maxRec FROM @<SQL calc_PathTag> GROUP BY patID ORDER BY maxRec DESC
   <SQL calc_AllFields>   //SELECT tagID, COUNT(patID) AS nTables, MAX(ncount) AS maxRec FROM @<SQL calc_PathTag> GROUP BY tagID ORDER BY maxRec DESC

   <GET PATHID (lastNode)>
      LOOP, SQL, @<DBNAME>, //SELECT  patID FROM @<XMELON_PREFIX>_pathDef WHERE lastNode = '@<p1>'
          , LINK, ", "
          ,, @<patID>


   <SQL PATH ASSOCIATED FIELDS>
      //SELECT calc_PathTag.patID AS patID, calc_PathTag.tagID AS tagID, calc_PathTag_tag.tagStr AS tag_tagStr FROM (@<SQL calc_PathTag>) AS calc_PathTag, @<XMELON_PREFIX>_tagDef AS calc_PathTag_tag WHERE  calc_PathTag.tagID == calc_PathTag_tag.tagID


   <SQL FOR PATH (lastNode)>
      LISTIX, SQL FOR PATH (pathID), @<PATHID OF p1>

   <PATHID OF p1>
      LISTIX, GET PATHID (lastNode), @<p1>

   <!alias
   <GET_SQL_FOR_XMLPATH>   LSX, SQL FOR PATH (lastNode), @<p1>

   <!alias
   <GET_SQL_FOR_XMLPATH_ID>   LSX, SQL FOR PATH (pathID), @<p1>

   <SQL FOR PATH (pathID)>
      //SELECT fileID, patID, patCnt, parentPatCnt,@<BREAK_LINE>
      LOOP, SQL, @<DBNAME>, //@<SQL PATH ASSOCIATED FIELDS p1>
          , LINK, ", @<BREAK_LINE>"
          ,, // MAX(CASE WHEN tagID=@<tagID> THEN value END) AS c_@<tag_tagStr>
      // @<BREAK_LINE>FROM @<XMELON_PREFIX>_data @<BREAK_LINE>WHERE patID IN (@<p1>) @<BREAK_LINE>GROUP BY fileID, patID, patCnt

      <! NOTE: "GROUP BY fileID, patID, patCnt, parentPatCnt" would also work but it is a little bit slower than
      <!       "GROUP BY fileID, patID, patCnt" and since per construction patCnt has always the same parentPatCnt
      <!       it should not be any difference in the result


   <SQL PATH ASSOCIATED FIELDS p1>
      LISTIX, SQL PATH ASSOCIATED FIELDS (pathID), @<p1>


   <SQL PATH ASSOCIATED FIELDS (lastNode)>
      LISTIX, SQL PATH ASSOCIATED FIELDS (pathID), @<PATHID OF p1>


   <SQL PATH ASSOCIATED FIELDS (pathID)>
      //SELECT * FROM (@<SQL PATH ASSOCIATED FIELDS>) WHERE patID IN (@<p1>)


   <CREATE VIEWS FOR ALL XML PATHS>
      DB, @<DBNAME>, EXECUTE, //DROP TABLE IF EXISTS calc_PathTag;
      DB, @<DBNAME>, EXECUTE, //DROP TABLE IF EXISTS tmp_calc_PathTag;
      DB, @<DBNAME>, EXECUTE, //CREATE TABLE tmp_calc_PathTag AS @<SQL calc_PathTag SELECT> ;
      VAR=, use tmp_calc_PathTag, 1
      DB, @<DBNAME>, EXECUTE, @<FULL XMELON VIEWS>
      VAR=, use tmp_calc_PathTag, 0

   <FULL XMELON VIEWS>
      //-- Create a view for each path
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL LAST NODES>) WHERE LENGTH (lastNode) > 0
          ,    , //DROP VIEW IF EXISTS @<lastNode viewName> ;
          ,    , //CREATE VIEW @<lastNode viewName> AS @<GET_SQL_FOR_lastNode>;
      //
      //-- Make connections with File for root paths
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL LAST NODES>) WHERE LENGTH (lastNode) > 0
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('file', '@<lastNode viewName>', 'fileID', '@<XMELON_PREFIX>_files', 'fileID');
      //
      //-- Make connections for the children paths
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL LAST NODES AND PARENTS> GROUP BY lastNode, parentPath_lastNode) WHERE LENGTH (lastNode) > 0 AND LENGTH(parentPath_lastNode) > 0
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('@<parentPath_lastNode>', '@<lastNode viewName>', 'fileID', '@<parentLastNode viewName>', 'fileID');
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('@<parentPath_lastNode>', '@<lastNode viewName>', 'parentPatCnt', '@<parentLastNode viewName>', 'patCnt');

   <GET_SQL_FOR_lastNode>
      LSX, GET_SQL_FOR_XMLPATH, @<lastNode>

   <parentLastNode viewName>
      //v
      JAVA, de.elxala.langutil.filedir.naming, toVariableName, @<parentPath_lastNode>

   <lastNode viewName>
      //v
      JAVA, de.elxala.langutil.filedir.naming, toVariableName, @<lastNode>


   <SQL LAST NODES AND PARENTS>
      DEEP DB, SELECT, @<XMELON_PREFIX>_pathDef
             , DBNAME, @<DBNAME>
             ,     , lastNode
             ,     , parentPath lastNode

   <SQL LAST NODES>
      //SELECT lastNode FROM @<XMELON_PREFIX>_pathDef GROUP BY lastNode


#**#

