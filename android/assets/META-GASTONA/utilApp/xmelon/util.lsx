#documentation#

   <help>
      //   LSX module     : META-GASTONA/utilApp/xmelon/util.lsx
      //   Last change on : 17.07.2012 01:01
      //
      //   Utilities to complete the xmelon schema, namely the queries that
      //   show a xml path as a table.
      //   Any single xml path can be seen as a table which column name are all
      //   tags that this path may contain. For instance
      //
      //    <shelf>
      //         <cd>
      //             <title>Blood on the tracks</title>
      //             <author>Bob Dylan</author>
      //         </cd>
      //         <cd>
      //             <title>The man who sold the world</title>
      //             <author>David Bowie</author>
      //             <year>1971</year>
      //         </cd>
      //         <cd>
      //             <title>Dioptria</title>
      //             <author>Pau Riba</author>
      //             <year>1969</year>
      //         </cd>
      //    </shelf>
      //
      //    the path "/shelf/cd" can be seen as a table with columns "title", "author" and "year"
      //
      //   Xmelon schema stores all the data in a single table (xmelon_data) but still keeping
      //   the information of the xml path and the name of the last tag for the data. Instead of having
      //   one table per xml path some macros are provided to form the correspondent select queries.
      //
      //   Variables
      //
      //      "XMELON_PREFIX"
      //         Prefix of the xmelon tables, default is "xmelon"
      //
      //      "BREAK_LINE"
      //         Break line text for the resulting SQLs, default is empty string
      //
      //      "DBNAME"
      //         Database name where the XMeLon tables are to be found, default is "" (property gastona.defaultDB)
      //
      //   Main functions (listix variable-procedures)
      //
      //      "CREATE VIEWS FOR ALL XML PATHS"
      //          Create a view for each xml path containing data, the name convention is
      //          start with "v" and replace the "/" in the path with "_", so for example
      //          in the previous data the path "/shelf/cd" would have a view named "v_self_cd".
      //          Create, as well, all logical connections between the views.
      //
      //      "SQL PATH ASSOCIATED FIELDS"
      //         Returns a sql that gives all column names given in all paths. The result fields are:
      //             patID      : path id where the column name belongs (pathID is a key of the table xmelon_pathDef)
      //             tagID      : tag id of that column
      //             tag_tagStrNormal : column as string
      //
      //      "SQL PATH ASSOCIATED FIELDS (pathID)"
      //         the same as "SQL PATH ASSOCIATED FIELDS" but only for a given path "pathID"
      //
      //      "SQL PATH ASSOCIATED FIELDS (pathStr)"
      //         the same as "SQL PATH ASSOCIATED FIELDS" but only for a given path "pathStr"
      //
      //      "SQL FOR PATH (pathID)" (or GET_SQL_FOR_XMLPATH_ID)
      //         Returns a table related with the given path "pathID", it contains the fields
      //             fileID       : file id of that path
      //             patID        : path id
      //             patCnt       : path counter, every record has a different path counter
      //             parentPatCnt : path counter of the parent path
      //             rest ...     : the rest of fields are the column fields for that path, all names start with "c_"
      //
      //      "SQL FOR PATH (pathStr)" (or GET_SQL_FOR_XMLPATH)
      //         Same as "SQL FOR PATH (pathID)" but using the patStr instead of patID
      //
      //   Example
      //
      //      GENERATE,, SQL FOR PATH (pathStr), listix, META-GASTONA/utilApp/xmelon/util.lsx
      //              , PARAMS, /Document/myPath
      //              , SET VAR DATA, DBNAME, mydatabase.db


#listix#

   <XMELON_PREFIX> xmelon
   <BREAK_LINE> ""
   <DBNAME> ""

   <use tmp_calc_PathTag> 0

   <SQL calc_PathTag SELECT>
      //SELECT patID, tagID,count(*) AS ncount FROM @<XMELON_PREFIX>_data GROUP BY patID,tagID ORDER BY ncount DESC

   <SQL calc_PathTag>
      IN CASE, @<use tmp_calc_PathTag>
             , 0, @<SQL calc_PathTag SELECT>
             , 1, //SELECT * FROM tmp_calc_PathTag

   <SQL calc_mainTables>  //SELECT patID, COUNT(tagID) AS maxCampos, MAX(ncount) AS maxRec FROM @<SQL calc_PathTag> GROUP BY patID ORDER BY maxRec DESC
   <SQL calc_AllFields>   //SELECT tagID, COUNT(patID) AS nTables, MAX(ncount) AS maxRec FROM @<SQL calc_PathTag> GROUP BY tagID ORDER BY maxRec DESC

   <GET PATHID (pathStr)>
      LOOP, SQL, @<DBNAME>, //SELECT  pathStr, patID FROM @<XMELON_PREFIX>_pathDef WHERE pathStr = '@<p1>' LIMIT 1
          ,, @<patID>


   <SQL PATH ASSOCIATED FIELDS>
      //SELECT calc_PathTag.patID AS patID, calc_PathTag.tagID AS tagID, calc_PathTag_tag.tagStrNormal AS tag_tagStrNormal FROM (@<SQL calc_PathTag>) AS calc_PathTag, @<XMELON_PREFIX>_tagDef AS calc_PathTag_tag WHERE  calc_PathTag.tagID == calc_PathTag_tag.tagID


   <SQL FOR PATH (pathStr)>
      LISTIX, SQL FOR PATH (pathID), @<PATHID OF p1>

   <PATHID OF p1>
      LISTIX, GET PATHID (pathStr), @<p1>

   <!alias
   <GET_SQL_FOR_XMLPATH>   LSX, SQL FOR PATH (pathStr), @<p1>

   <!alias
   <GET_SQL_FOR_XMLPATH_ID>   LSX, SQL FOR PATH (pathID), @<p1>

   <SQL FOR PATH (pathID)>
      //SELECT fileID, patID, patCnt, parentPatCnt,@<BREAK_LINE>
      LOOP, SQL, @<DBNAME>, //@<SQL PATH ASSOCIATED FIELDS p1>
          , LINK, ", @<BREAK_LINE>"
          ,, // MAX(CASE WHEN tagID=@<tagID> THEN value END) AS c_@<tag_tagStrNormal>
      // @<BREAK_LINE>FROM @<XMELON_PREFIX>_data @<BREAK_LINE>WHERE patID = @<p1> @<BREAK_LINE>GROUP BY fileID, patID, patCnt

      <! NOTE: "GROUP BY fileID, patID, patCnt, parentPatCnt" would also work but it is a little bit slower than
      <!       "GROUP BY fileID, patID, patCnt" and since per construction patCnt has always the same parentPatCnt
      <!       it should not be any difference in the result


   <SQL PATH ASSOCIATED FIELDS p1>
      LISTIX, SQL PATH ASSOCIATED FIELDS (pathID), @<p1>


   <SQL PATH ASSOCIATED FIELDS (pathStr)>
      LISTIX, SQL PATH ASSOCIATED FIELDS (pathID), @<PATHID OF p1>


   <SQL PATH ASSOCIATED FIELDS (pathID)>
      //SELECT * FROM (@<SQL PATH ASSOCIATED FIELDS>) WHERE patID == '@<p1>'


   <CREATE VIEWS FOR ALL XML PATHS>
      DB, @<DBNAME>, EXECUTE, //DROP TABLE IF EXISTS tmp_calc_PathTag; CREATE TABLE tmp_calc_PathTag AS @<SQL calc_PathTag SELECT> ;
      VAR=, use tmp_calc_PathTag, 1
      DB, @<DBNAME>, EXECUTE, @<FULL XMELON VIEWS>
      VAR=, use tmp_calc_PathTag, 0
      DB, @<DBNAME>, EXECUTE, //DROP TABLE IF EXISTS tmp_calc_PathTag;

   <FULL XMELON VIEWS>
      //-- Create a view for each path
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL PATHS>) WHERE LENGTH (pathStr) > 0
          ,    , //DROP VIEW IF EXISTS v@<pathStrNormal> ;
          ,    , //CREATE VIEW v@<pathStrNormal> AS @<GET_SQL_FOR_pathStr>;
      //
      //-- Make connections with File for root paths
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL PATHS>) WHERE LENGTH (pathStr) > 0 AND parentPatID == 0
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('file', 'v@<pathStrNormal>', 'fileID', '@<XMELON_PREFIX>_files', 'fileID');
      //
      //-- Make connections for the children paths
      //
      LOOP, SQL, @<DBNAME>, //SELECT * FROM (@<SQL PATHS>) WHERE LENGTH (pathStr) > 0 AND parentPatID != 0
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('@<parentPath lastNode normal>', 'v@<pathStrNormal>', 'fileID', 'v@<parentPath_pathStrNormal>', 'fileID');
          ,    , //INSERT OR IGNORE INTO __dbMore_Connections VALUES ('@<parentPath lastNode normal>', 'v@<pathStrNormal>', 'parentPatCnt', 'v@<parentPath_pathStrNormal>', 'patCnt');

          
   <parentPath lastNode normal> STRCONV, 2VARNAME, @<parentPath_lastNode>
   
   <GET_SQL_FOR_pathStr>
      LSX, GET_SQL_FOR_XMLPATH, @<pathStr>

   <SQL PATHS>
      DEEP DB, SELECT, @<XMELON_PREFIX>_pathDef
             , DBNAME, @<DBNAME>
             ,     , patID
             ,     , parentPatID
             ,     , pathStr
             ,     , pathStrNormal
             ,     , lastNode
             ,     , level
             ,     , parentPath pathStrNormal
             ,     , parentPath lastNode

#**#
